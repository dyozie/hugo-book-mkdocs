<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Managing Client Access on Pivotal HDB</title>
    <link>https://example.org/clientaccess/</link>
    <description>Recent content in Managing Client Access on Pivotal HDB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://example.org/clientaccess/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configuring Client Authentication</title>
      <link>https://example.org/clientaccess/client_auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/client_auth/</guid>
      <description>When a HAWQ system is first initialized, the system contains one predefined superuser role. This role will have the same name as the operating system user who initialized the HAWQ system. This role is referred to as gpadmin. By default, the system is configured to only allow local connections to the database from the gpadmin role. To allow any other roles to connect, or to allow connections from remote hosts, you configure HAWQ to allow such connections.</description>
    </item>
    
    <item>
      <title>Configuring HAWQ/PXF for Secure HDFS</title>
      <link>https://example.org/clientaccess/kerberos-securehdfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/kerberos-securehdfs/</guid>
      <description>When Kerberos is enabled for your HDFS filesystem, HAWQ, as an HDFS client, requires a principal and keytab file to authenticate access to HDFS (filesystem) and YARN (resource management). If you have enabled Kerberos at the HDFS filesystem level, you will create and deploy principals for your HDFS cluster, and ensure that Kerberos authentication is enabled and functioning for all HDFS client services, including HAWQ and PXF.
You will perform different procedures depending upon whether you use Ambari to manage your HAWQ cluster or you manage your cluster from the command line.</description>
    </item>
    
    <item>
      <title>Configuring Kerberos User Authentication for HAWQ</title>
      <link>https://example.org/clientaccess/kerberos-userauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/kerberos-userauth/</guid>
      <description>When Kerberos authentication is enabled at the user level, HAWQ uses the Generic Security Service Application Program Interface (GSSAPI) to provide automatic authentication (single sign-on). When HAWQ uses Kerberos user authentication, both the HAWQ server and those HAWQ users (roles) that use Kerberos authentication require a principal and a keytab. When a user attempts to log in to HAWQ, the HAWQ server uses its Kerberos principal to connect to the Kerberos server, and presents the user&amp;rsquo;s principal for Kerberos validation.</description>
    </item>
    
    <item>
      <title>Connecting with psql</title>
      <link>https://example.org/clientaccess/g-connecting-with-psql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/g-connecting-with-psql/</guid>
      <description>Depending on the default values used or the environment variables you have set, the following examples show how to access a database via psql:
$ psql -d gpdatabase -h master_host -p 5432 -U `gpadmin`  $ psql gpdatabase  $ psql  If a user-defined database has not yet been created, you can access the system by connecting to the template1 database. For example:
$ psql template1  After connecting to a database, psql provides a prompt with the name of the database to which psql is currently connected, followed by the string =&amp;gt; (or =# if you are the database superuser).</description>
    </item>
    
    <item>
      <title>Disabling Kerberos Security</title>
      <link>https://example.org/clientaccess/disable-kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/disable-kerberos/</guid>
      <description>HAWQ supports Kerberos at both the HDFS and/or user authentication levels. You will perform different disable procedures for each.
Disable Kerberized HDFS for HAWQ/PXF You will perform different procedures to disable HAWQ/PXF access to a previously-kerberized HDFS depending upon whether you manage your cluster from the command line or use Ambari to manage your cluster.
Procedure for Ambari-Managed Clusters If you manage your cluster using Ambari, you will disable Kerberos authentication for your cluster as described in the How To Disable Kerberos Hortonworks documentation.</description>
    </item>
    
    <item>
      <title>Establishing a Database Session</title>
      <link>https://example.org/clientaccess/g-establishing-a-database-session/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/g-establishing-a-database-session/</guid>
      <description>Users can connect to HAWQ using a PostgreSQL-compatible client program, such as psql. Users and administrators always connect to HAWQ through the master; the segments cannot accept client connections.
In order to establish a connection to the HAWQ master, you will need to know the following connection information and configure your client program accordingly.
   Connection Parameter Description Environment Variable     Application name The application name that is connecting to the database.</description>
    </item>
    
    <item>
      <title>Example - Setting up an MIT KDC Server</title>
      <link>https://example.org/clientaccess/kerberos-mitkdc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/kerberos-mitkdc/</guid>
      <description>Follow this procedure to install and configure a Kerberos KDC server on a Red Hat Enterprise Linux host. The KDC server resides on the host named &amp;lt;kdc-server&amp;gt;.
 Log in to the Kerberos KDC Server system as a superuser:
$ ssh root@&amp;lt;kdc-server&amp;gt; root@kdc-server$  Install the Kerberos server packages:
root@kdc-server$ yum install krb5-libs krb5-server krb5-workstation  Define the Kerberos realm for your cluster by editting the /etc/krb5.conf configuration file. The following example configures a Kerberos server with a realm named REALM.</description>
    </item>
    
    <item>
      <title>HAWQ Client Applications</title>
      <link>https://example.org/clientaccess/g-hawq-database-client-applications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/g-hawq-database-client-applications/</guid>
      <description>HAWQ is pre-installed with a number of client utility applications. You can also run client applications in your HAWQ deployment that were created using standard ODBC/JDBC Application Interfaces.
Alternatively, you may want to provide access to your HAWQ master node from a Linux client outside of your HAWQ cluster. One option to enable this access is to install the full HAWQ binary on the client node. A second option is to create a minimal psql client package from an existing HAWQ installation which you could then install on a non-HAWQ client.</description>
    </item>
    
    <item>
      <title>HAWQ Database Drivers and APIs</title>
      <link>https://example.org/clientaccess/g-database-application-interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/g-database-application-interfaces/</guid>
      <description>You may want to connect your existing Business Intelligence (BI) or Analytics applications with HAWQ. The database application programming interfaces most commonly used with HAWQ are the Postgres and ODBC and JDBC APIs.
HAWQ provides the following connectivity tools for connecting to the database:
 ODBC driver JDBC driver libpq - PostgreSQL C API  HAWQ Drivers ODBC and JDBC drivers for HAWQ are available as a separate download from Pivotal Network Pivotal Network.</description>
    </item>
    
    <item>
      <title>Overview of HAWQ Authorization</title>
      <link>https://example.org/clientaccess/hawq-access-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/hawq-access-checks/</guid>
      <description>Native HAWQ authorization provides SQL standard authorization at the database and table level for specific users/roles using the GRANT and REVOKE SQL commands. HAWQ integration with Ranger provides policy-based authorization, enabling you to identify the conditions under which a user and/or group can access individual HAWQ resources, including the operations permitted on those resources.
Native HAWQ and Ranger authorization are mutually exclusive.
Native HAWQ and Ranger authorization share pg_hba.conf-based user authentication.</description>
    </item>
    
    <item>
      <title>Troubleshooting Connection Problems</title>
      <link>https://example.org/clientaccess/g-troubleshooting-connection-problems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/g-troubleshooting-connection-problems/</guid>
      <description>A number of things can prevent a client application from successfully connecting to HAWQ. This topic explains some of the common causes of connection problems and how to correct them.
   Problem Solution     No pg_hba.conf entry for host or user To enable HAWQ to accept remote client connections, you must configure your HAWQ master instance so that connections are allowed from the client hosts and database users that will be connecting to HAWQ.</description>
    </item>
    
    <item>
      <title>Using HAWQ Native Authorization</title>
      <link>https://example.org/clientaccess/roles_privs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/roles_privs/</guid>
      <description>The HAWQ authorization mechanism stores roles and permissions to access database objects in the database and is administered using SQL statements or command-line utilities.
HAWQ manages database access permissions using roles. The concept of roles subsumes the concepts of users and groups. A role can be a database user, a group, or both. Roles can own database objects (for example, tables) and can assign privileges on those objects to other roles to control access to the objects.</description>
    </item>
    
    <item>
      <title>Using Kerberos Authentication</title>
      <link>https://example.org/clientaccess/kerberos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/kerberos/</guid>
      <description>Kerberos is an encrpyted network authentication protocol for client/server applications. Kerberos is a complex subsystem. Detailing how to install and configure Kerberos itself is beyond the scope of this document. You should familiarize yourself with Kerberos concepts before configuring Kerberos for your HAWQ cluster. For more information about Kerberos, see http://web.mit.edu/kerberos/.
HAWQ supports Kerberos at both the HDFS and/or user authentication levels. You will perform distinct configuration procedures for each.</description>
    </item>
    
    <item>
      <title>Using LDAP Authentication with TLS/SSL</title>
      <link>https://example.org/clientaccess/ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/clientaccess/ldap/</guid>
      <description>You can control access to HAWQ with an LDAP server and, optionally, secure the connection with encryption by adding parameters to pg_hba.conf file entries.
HAWQ supports LDAP authentication with the TLS/SSL protocol to encrypt communication with an LDAP server:
 LDAP authentication with STARTTLS and TLS protocol – STARTTLS starts with a clear text connection (no encryption) and upgrades it to a secure connection (with encryption). LDAP authentication with a secure connection and TLS/SSL (LDAPS) – HAWQ uses the TLS or SSL protocol based on the protocol that is used by the LDAP server.</description>
    </item>
    
  </channel>
</rss>